// James Hicks Lab 5, November 25 2023

#pragma once
#include <stdint.h>
#include <stdbool.h>
#include <inc/hw_memmap.h>
#include <driverlib/gpio.h>
#include <driverlib/timer.h>
#include <driverlib/pin_map.h>
#include <driverlib/interrupt.h>

#define pwm_period 20 // this comes from the sg90 datasheet (20 milliseconds)

void portf_isr(void)
{
  GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
  GPIOIntDisable(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
  TimerDisable(TIMER0_BASE, TIMER_BOTH);
  // 15 millisecond delay
  TimerLoadSet(TIMER1_BASE, TIMER_A, 0x)
}

void pwm_isr(void)
{
  
}

// debounce timer
void timer_isr(void)
{
  
}

////////////////////////////////////////////////////////////////////////////

/*
pf0 <- sw2
pf4 <- sw1
pf1 <- pwm output 
*/
void gpio_init(void)
{
  SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
  while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF))
    {
    }
  GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
  GPIOPinTypeGPIOPWM(GPIO_PORTF_BASE, GPIO_PIN_1);
  GPIOPinConfigure(GPIO_PF1_M0PWM1);
  
}

void pwm_init(void)
{
  SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
  while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0))
    {
    }
  PWMClockSet();
  PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN);
  PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, SysCtlClockGet() / 100); //TODO this needs to change for servo
  PWMGenEnable(PWM0_BASEm PWM_GEN_0);
  // THE NEUTRAL POSITION IS 1500/SEC FOR THIS SERVO
  PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, 1500);
  PWMOutputState(PWM0_BASE, PWM_OUT_1_BIT, true);
}

void main(void)
{
  SysCtlClockSet(SYSCTL_USE_OSC | SYSCTL_OSC_INT); //TODO::ENSURE 16 MHz
  gpio_init();
  pwm_init();
  while(1)
    {
    }
  return 0;
}
